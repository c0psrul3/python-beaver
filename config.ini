##  Beaver Configuration File
#############################

#
# Main configuration options
#

## TCP Host
# Default 127.0.0.1.
tcp_host:
## TCP Port
# Default 9999.
tcp_port:
## Connect using SSL/TLS
# Defaults 0. 
tcp_ssl 
## Path to client private key for SSL/TLS
# Optional. Defaults None.
tcp_ssl_key 
## Path to client certificate for SSL/TLS
# Optional. Defaults None.
tcp_ssl_cert 
## Path to CA certificate for SSL/TLS
# Optional. Defaults None.
tcp_ssl_cacert 
## UDP Host
# Default 127.0.0.1.
udp_host:
## UDP Port
# Default 9999.
udp_port:
# Default None 
http_url: http://someserver.com/path



# 
# The following are used for instances when a TransportException is thrown - Transport dependent
#

## Initial respawn delay for exponential backoff
# Default 3.
respawn_delay: 
## Max failures before exponential backoff terminates
# Default 7.
max_failure: 
## Max log entries Beaver can store in it’s queue before backing off until they have been transmitted
# Default 100. 
max_queue_size: 



#
# The following configuration keys are for SinceDB support. Specifying these 
# will enable saving the current line number in an sqlite database. This is 
# useful for cases where you may be restarting the Beaver process, such as 
# during a logrotate.
#

## Full path to an sqlite3 database. Will be created at this path 
## if it does not exist. Beaver process must have read and write access
# Default None.
sincedb_path: 



#
# Logstash 1.2 introduced a JSON schema change. The logstash_version needs to 
# be set or Beaver will fail to start
#

## Set to 0 for older versions, 1 for Logstash v1.2 and above
# No default.
logstash_version: 



#
# The following configuration keys are for building an SSH Tunnel that can be 
# used to proxy from the current host to a desired server. This proxy is torn 
# down when Beaver halts in all cases.
#

## Full path to id_rsa key file
# Default None.
ssh_key_file: 
## SSH Tunnel in the format user@host:port
# Default None.
ssh_tunnel: 
## Local port for SSH Tunnel
# Default None. 
ssh_tunnel_port: 
## Remote host to connect to within SSH Tunnel
# Default None.
ssh_remote_host:
## Remote port to connect to within SSH Tunnel
# Default None.
ssh_remote_port: 
## Comma separated list of SSH options to Pass through to the SSH Tunnel. See ssh_config(5) for more options
# Default None.
ssh_options:



#
# The following configuration keys are for multi-line events support and are per file.
#

## If a line match this regular expression, it will be merged with next line(s).
# Default None.
multiline_regex_after: 
## If a line match this regular expression, it will be merged with previous line(s).
# Default None.
multiline_regex_before: 



#
# The following can also be passed via argparse. Argparse will override all options in the configfile, when specified.
#

## Options [ json, msgpack, string, raw, rawjson, gelf ]. Format to use when sending to transport
# Default json.
format: 
## Space-separated list of files to tail. (Comma separated if specified in the config file)
# Default files.
files: 
## Path glob to tail.
# Default /var/log.
path:
## Transport to use when log changes are detected
# Default stdout.
transport:
## Whether to use the machine’s FQDN in transport output
# Default False.
fqdn:
## Manually specified hostname
# Default None.
hostname:



#
# The following configuration key allows cleaning up the worker and transport 
# sub-processes on an interval respawning
#

## Interval between sub-process cleanup
# Default None.
refresh_worker_process:



#
# The following configuration key allows the importing of OS environment data into the event.
#

## Format is fieldname1,ENVVARIABLE1[,fieldname2,ENVVARIABLE2, ...]
# Default None.
add_field_env:

#
# The following configuration key allows to set a redis_namespace per files 
# stanza. It will override the global [beaver] setting fo the same key.
#

## Redis key namespace
# Defaults to Null string.
redis_namespace:


#
# Example of Multi-line Parsing
#
## Simple multi-line event: if line is indented it is the continuation of an event:

# /etc/beaver/conf
[/tmp/somefile]
multiline_regex_before = ^\s+

Multi-line event for Python traceback:

# /etc/beaver/conf
[/tmp/python.log]
multiline_regex_after = (^\s+File.*, line \d+, in)
multiline_regex_before = (^Traceback \(most recent call last\):)|(^\s+File.*, line \d+, in)|(^\w+Error: )

# /tmp/python.log
DEBUG:root:Calling faulty_function
WARNING:root:An error occured
Traceback (most recent call last):
  File "doerr.py", line 12, in <module>
    faulty_function()
  File "doerr.py", line 7, in faulty_function
    0 / 0
ZeroDivisionError: integer division or modulo by zero



---

#
# Example of SSH Tunneling
#
## Use SSH options for redis transport through SSH Tunnel:

# /etc/beaver/conf
[beaver]
transport: redis
redis_url: redis://localhost:6379/0
redis_namespace: logstash:beaver
ssh_options: StrictHostKeyChecking=no, Compression=yes, CompressionLevel=9
ssh_key_file: /etc/beaver/remote_key
ssh_tunnel: remote-logger@logs.example.net
ssh_tunnel_port: 6379
ssh_remote_host: 127.0.0.1
ssh_remote_port: 6379


